加载网页时运行
窗口。addEventListener（'load'， （） => {
斯瓦尔。火（{
标题："你确定要在后台播放音乐吗？，
文本："您将无法还原此内容！，
    // 文本："您将无法还原此内容！
图标："警告"，
显示钱博尔顿：真，
确认按钮颜色："#3085d6"，
    取消按钮颜色："#d33"，
    确认按钮文本："是"，
    取消按钮文本："否"，
  })。then（（result) => {
    如果（结果。已确认) {
      文档。querySelector（'.song'）.玩();
      resolveFetch（）.然后（动画时间线());
    } 还 {
      resolveFetch（）.然后（动画时间线());
    }
  })
})
动画时间轴
const animationTimeline = () => {
  需要单独动画化的吐槽
  const textBoxChars = document.getElementsByClassName（"hbd-chatbox"）[0];
  const hbd = document.getElementsByClassName（"wish-hbd"）[0];
  文本框字符。innerHTML = '<span>${textBoxChars.innerHTML
。拆分（""）
 。join（"</span><span>"）}</span';
  hbd.innerHTML = '<span>${hbd.innerHTML
。拆分（""）
 。join（"</span><span>"）}</span';
  const ideaTextTrans = {
    不透明度： 0，
    y： -20，
    旋转X： 5，
    skewX： "15deg"，
  };
  const ideaTextTransLeave = {
    不透明度： 0，
    y： 20，
    旋转： 5，
    skewX： "-15deg"，
  };
  const tl = new TimelineMax();
  嗯。to（".container"， 0.1， {
      可见性："可见"，
    })
    。from（".one"， 0.7， {
      不透明度： 0，
      y： 10，
    })
    。from（".two"， 0.4， {
      不透明度： 0，
      y： 10，
    })
    。自(
      ".one"，
      0.7， {
        不透明度： 0，
        y： 10，
      },
      "+=2.5"
    )
    。自(
      ".二"，
      0.7， {
        不透明度： 0，
        y： 10，
      },
      "-=1"
    )
    。来自（".three"， 0.7， {
      不透明度： 0，
      y： 10，
      比例： 0.7
    })
    。自(
      ".三"，
      0.7， {
        不透明度： 0，
        y： 10，
      },
      "+=2"
    )
    。来自（".four"， 0.7， {
      比例： 0.2，
      不透明度： 0，
    })
    。from（".fake-btn"， 0.3， {
      比例： 0.2，
      不透明度： 0，
    })
    。交错到(
      ".hbd-chatbox span"，
      1.5， {
        可见性："可见"，
      },
      0.05
    )
    .to(".fake-btn", 0.1, {
      backgroundColor: "rgb(127, 206, 248)",
    })
    .to(
      ".four",
      0.5, {
        scale: 0.2,
        opacity: 0,
        y: -150,
      },
      "+=0.7"
    )
    .from(".idea-1", 0.7, ideaTextTrans)
    .to(".idea-1", 0.7, ideaTextTransLeave, "+=1.5")
    .from(".idea-2", 0.7, ideaTextTrans)
    .to(".idea-2", 0.7, ideaTextTransLeave, "+=1.5")
    .from(".idea-3", 0.7, ideaTextTrans)
    .to(".idea-3 strong", 0.5, {
      scale: 1.2,
      x: 10,
      backgroundColor: "rgb(21, 161, 237)",
      color: "#fff",
    })
    .to(".idea-3", 0.7, ideaTextTransLeave, "+=1.5")
    .from(".idea-4", 0.7, ideaTextTrans)
    .to(".idea-4", 0.7, ideaTextTransLeave, "+=1.5")
    .from(
      ".idea-5",
      0.7, {
        rotationX: 15,
        rotationZ: -10,
        skewY: "-5deg",
        y: 50,
        z: 10,
        opacity: 0,
      },
      "+=0.5"
    )
    .to(
      ".idea-5 span",
      0.7, {
        rotation: 90,
        x: 8,
      },
      "+=0.4"
    )
    .to(
      ".idea-5",
      0.7, {
        scale: 0.2,
        opacity: 0,
      },
      "+=2"
    )
    .staggerFrom(
      ".idea-6 span",
      0.8, {
        scale: 3,
        opacity: 0,
        rotation: 15,
        ease: Expo.easeOut,
      },
      0.2
    )
    .staggerTo(
      ".idea-6 span",
      0.8, {
        scale: 3,
        opacity: 0,
        rotation: -15,
        ease: Expo.easeOut,
      },
      0.2,
      "+=1"
    )
    .staggerFromTo(
      ".baloons img",
      2.5, {
        opacity: 0.9,
        y: 1400,
      }, {
        opacity: 1,
        y: -1000,
      },
      0.2
    )
    .from(
      ".lydia-dp",
      0.5, {
        scale: 3.5,
        opacity: 0,
        x: 25,
        y: -25,
        rotationZ: -45,
      },
      "-=2"
    )
    .from(".hat", 0.5, {
      x: -100,
      y: 350,
      rotation: -180,
      opacity: 0,
    })
    .staggerFrom(
      ".wish-hbd span",
      0.7, {
        opacity: 0,
        y: -50,
        // scale: 0.3,
        rotation: 150,
        skewX: "30deg",
        ease: Elastic.easeOut.config(1, 0.5),
      },
      0.1
    )
    .staggerFromTo(
      ".wish-hbd span",
      0.7, {
        scale: 1.4,
        rotationY: 150,
      }, {
        scale: 1,
        rotationY: 0,
        color: "#ff69b4",
        ease: Expo.easeOut,
      },
      0.1,
      "party"
    )
    .from(
      ".wish h5",
      0.5, {
        opacity: 0,
        y: 10,
        skewX: "-15deg",
      },
      "party"
    )
    .staggerTo(
      ".eight svg",
      1.5, {
        visibility: "visible",
        opacity: 0,
        scale: 80,
        repeat: 3,
        repeatDelay: 1.4,
      },
      0.3
    )
    .to(".six", 0.5, {
      opacity: 0,
      y: 30,
      zIndex: "-1",
    })
    .staggerFrom(".nine p", 1, ideaTextTrans, 1.2)
    .to(
      ".last-smile",
      0.5, {
        rotation: 90,
      },
      "+=1"
    );
  // tl.seek("currentStep");
  // tl.timeScale(2);
  // Restart Animation on click
  const replyBtn = document.getElementById("replay");
  replyBtn.addEventListener("click", () => {
    tl.restart();
  });
};
// Import the data to customize and insert them into page
const fetchData = () => {
  fetch("customize.json")
    .then(data => data.json())
    .then(data => {
      对象。键（数据）。地图（自定义数据 => {
        if （data[customData] ！== "") {
          if （customData === "imagePath") {
            公文
              。getElementById（customData)
              。setAttribute（"src"， data[customData]);
          } 还 {
            文档。getElementById（customData）.innerText = data[customData];
          }
        }
      });
    });
};
按顺序运行抓取和动画
const resolveFetch = () => {
  返回新承诺（（解决，拒绝）) => {
    获取数据();
    resolve（"Fetch done！");
  });
};